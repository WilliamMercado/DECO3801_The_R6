[{"C:\\Users\\ryuto\\OneDrive\\Desktop\\2024_Sem2\\DECO3801\\DECO3801_The_R6\\frontend\\src\\index.js":"1","C:\\Users\\ryuto\\OneDrive\\Desktop\\2024_Sem2\\DECO3801\\DECO3801_The_R6\\frontend\\src\\App.js":"2","C:\\Users\\ryuto\\OneDrive\\Desktop\\2024_Sem2\\DECO3801\\DECO3801_The_R6\\frontend\\src\\components\\UploadPage.js":"3","C:\\Users\\ryuto\\OneDrive\\Desktop\\2024_Sem2\\DECO3801\\DECO3801_The_R6\\frontend\\src\\components\\HomePage.js":"4","C:\\Users\\ryuto\\OneDrive\\Desktop\\2024_Sem2\\DECO3801\\DECO3801_The_R6\\frontend\\src\\components\\SearchPage.js":"5","C:\\Users\\ryuto\\OneDrive\\Desktop\\2024_Sem2\\DECO3801\\DECO3801_The_R6\\frontend\\src\\components\\TermsPage.js":"6","C:\\Users\\ryuto\\OneDrive\\Desktop\\2024_Sem2\\DECO3801\\DECO3801_The_R6\\frontend\\src\\components\\AboutPage.js":"7","C:\\Users\\ryuto\\OneDrive\\Desktop\\2024_Sem2\\DECO3801\\DECO3801_The_R6\\frontend\\src\\components\\PrivacyPage.js":"8","C:\\Users\\ryuto\\OneDrive\\Desktop\\2024_Sem2\\DECO3801\\DECO3801_The_R6\\frontend\\src\\components\\Template.js":"9","C:\\Users\\ryuto\\OneDrive\\Desktop\\2024_Sem2\\DECO3801\\DECO3801_The_R6\\frontend\\src\\pages\\Home.js":"10","C:\\Users\\ryuto\\OneDrive\\Desktop\\2024_Sem2\\DECO3801\\DECO3801_The_R6\\frontend\\src\\pages\\Upload.js":"11","C:\\Users\\ryuto\\OneDrive\\Desktop\\2024_Sem2\\DECO3801\\DECO3801_The_R6\\frontend\\src\\pages\\Search.js":"12","C:\\Users\\ryuto\\OneDrive\\Desktop\\2024_Sem2\\DECO3801\\DECO3801_The_R6\\frontend\\src\\pages\\Privacy.js":"13","C:\\Users\\ryuto\\OneDrive\\Desktop\\2024_Sem2\\DECO3801\\DECO3801_The_R6\\frontend\\src\\pages\\About.js":"14","C:\\Users\\ryuto\\OneDrive\\Desktop\\2024_Sem2\\DECO3801\\DECO3801_The_R6\\frontend\\src\\pages\\Terms.js":"15","C:\\Users\\ryuto\\OneDrive\\Desktop\\2024_Sem2\\DECO3801\\DECO3801_The_R6\\frontend\\src\\components\\Header.js":"16","C:\\Users\\ryuto\\OneDrive\\Desktop\\2024_Sem2\\DECO3801\\DECO3801_The_R6\\frontend\\src\\components\\Footer.js":"17"},{"size":234,"mtime":1726031936109,"results":"18","hashOfConfig":"19"},{"size":1052,"mtime":1726031936105,"results":"20","hashOfConfig":"19"},{"size":273,"mtime":1726031936109,"results":"21","hashOfConfig":"19"},{"size":260,"mtime":1726031936107,"results":"22","hashOfConfig":"19"},{"size":275,"mtime":1726031936108,"results":"23","hashOfConfig":"19"},{"size":279,"mtime":1726031936109,"results":"24","hashOfConfig":"19"},{"size":271,"mtime":1726031936106,"results":"25","hashOfConfig":"19"},{"size":278,"mtime":1726031936108,"results":"26","hashOfConfig":"19"},{"size":824,"mtime":1726032550929,"results":"27","hashOfConfig":"19"},{"size":4103,"mtime":1726031936111,"results":"28","hashOfConfig":"19"},{"size":15362,"mtime":1726110803554,"results":"29","hashOfConfig":"19"},{"size":4530,"mtime":1726111800414,"results":"30","hashOfConfig":"19"},{"size":5974,"mtime":1726031936111,"results":"31","hashOfConfig":"19"},{"size":13351,"mtime":1726031936110,"results":"32","hashOfConfig":"19"},{"size":4995,"mtime":1726032383588,"results":"33","hashOfConfig":"19"},{"size":5028,"mtime":1726031936107,"results":"34","hashOfConfig":"19"},{"size":1225,"mtime":1726031936106,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1vm9oft",{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69"},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","suppressedMessages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\ryuto\\OneDrive\\Desktop\\2024_Sem2\\DECO3801\\DECO3801_The_R6\\frontend\\src\\index.js",[],[],"C:\\Users\\ryuto\\OneDrive\\Desktop\\2024_Sem2\\DECO3801\\DECO3801_The_R6\\frontend\\src\\App.js",["88","89"],[],"C:\\Users\\ryuto\\OneDrive\\Desktop\\2024_Sem2\\DECO3801\\DECO3801_The_R6\\frontend\\src\\components\\UploadPage.js",[],[],"C:\\Users\\ryuto\\OneDrive\\Desktop\\2024_Sem2\\DECO3801\\DECO3801_The_R6\\frontend\\src\\components\\HomePage.js",[],[],"C:\\Users\\ryuto\\OneDrive\\Desktop\\2024_Sem2\\DECO3801\\DECO3801_The_R6\\frontend\\src\\components\\SearchPage.js",[],[],"C:\\Users\\ryuto\\OneDrive\\Desktop\\2024_Sem2\\DECO3801\\DECO3801_The_R6\\frontend\\src\\components\\TermsPage.js",[],[],"C:\\Users\\ryuto\\OneDrive\\Desktop\\2024_Sem2\\DECO3801\\DECO3801_The_R6\\frontend\\src\\components\\AboutPage.js",[],[],"C:\\Users\\ryuto\\OneDrive\\Desktop\\2024_Sem2\\DECO3801\\DECO3801_The_R6\\frontend\\src\\components\\PrivacyPage.js",[],[],"C:\\Users\\ryuto\\OneDrive\\Desktop\\2024_Sem2\\DECO3801\\DECO3801_The_R6\\frontend\\src\\components\\Template.js",[],[],"C:\\Users\\ryuto\\OneDrive\\Desktop\\2024_Sem2\\DECO3801\\DECO3801_The_R6\\frontend\\src\\pages\\Home.js",[],[],"C:\\Users\\ryuto\\OneDrive\\Desktop\\2024_Sem2\\DECO3801\\DECO3801_The_R6\\frontend\\src\\pages\\Upload.js",["90","91","92","93"],[],"import React, { useState, useEffect, useRef} from \"react\";\r\n\r\n\r\n\r\nexport default function Upload() {\r\n    const [files, setFiles] = useState([]);\r\n    const [text, setText] = useState('');\r\n    const [previews, setPreviews] = useState([]); \r\n    const [aiOptions, setAiOptions] = useState([]);\r\n    const [inpaint, setInpaint] = useState(null);\r\n\r\n    const [tool, setTool] = useState('brush'); \r\n    const [brushSize, setBrushSize] = useState(15); \r\n    const [brushColor, setBrushColor] = useState('#000000'); \r\n    const [imageChosen, setChosen] = useState(false)\r\n    const canvasRef = useRef(null);\r\n    const ctxRef = useRef(null);\r\n    const [isDrawing, setIsDrawing] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const newPreviews = files.map(file => URL.createObjectURL(file));\r\n        setPreviews(newPreviews);\r\n        setAiOptions(new Array(files.length).fill('AI Options'));\r\n        return () => newPreviews.forEach(preview => URL.revokeObjectURL(preview));\r\n    }, [files]);\r\n\r\n    //for canvas.\r\n    useEffect(() => {\r\n        const canvas = canvasRef.current;\r\n        const ctx = canvas.getContext('2d');\r\n        ctxRef.current = ctx;\r\n        ctx.lineCap = 'round';\r\n        ctx.lineWidth = brushSize;\r\n        ctx.strokeStyle = 'rgba(255,255,248, 0.3)';\r\n\r\n    }, [brushSize]);\r\n\r\n    const handleChange = (event) => {\r\n        const selectedFiles = event.target.files; \r\n        if (selectedFiles.length > 0) {\r\n            setFiles(Array.from(selectedFiles));\r\n\r\n            \r\n        } else {\r\n            console.warn(\"No file selected or the selected files are not valid.\");\r\n        }\r\n    };\r\n\r\n    const handleCanvasChange = (event) => {\r\n        const selectedImage = event.target.files[0]; \r\n        if (selectedImage) {\r\n            const img = new Image();\r\n            img.src = URL.createObjectURL(selectedImage);\r\n            img.onload = () => {\r\n                const canvas = canvasRef.current;\r\n                const ctx = canvas.getContext('2d');\r\n                ctx.clearRect(0, 0, canvas.width, canvas.height); \r\n                ctx.drawImage(img, 0, 0, canvas.width, canvas.height); \r\n            };\r\n            setChosen(true);\r\n\r\n\r\n            \r\n        } else {\r\n            setChosen(false);\r\n            console.warn(\"No file selected or the selected files are not valid.\");\r\n        }\r\n    };\r\n    \r\n    const handleTextChange = (event) => {\r\n        setText(event.target.value);\r\n    };\r\n\r\n    const handleOptionChange = (index, value) => {\r\n        const updatedOptions = [...aiOptions];\r\n        updatedOptions[index] = value;\r\n        setAiOptions(updatedOptions);\r\n        if (value === \"Inpaint\") {\r\n            setInpaint(index); \r\n        } else if (inpaint === index) {\r\n            setInpaint(null); \r\n        }\r\n    };\r\n\r\n     // drawing on canvas\r\n     const startDrawing = (e) => {\r\n        e.preventDefault();\r\n        const { offsetX, offsetY } = getPointerPosition(e);\r\n        ctxRef.current.beginPath();\r\n        ctxRef.current.moveTo(offsetX, offsetY);\r\n        setIsDrawing(true);\r\n    };\r\n\r\n\r\n    const draw = (e) => {\r\n        \r\n        if (!isDrawing) return;\r\n        e.preventDefault();\r\n        const { offsetX, offsetY } = getPointerPosition(e);\r\n        ctxRef.current.lineTo(offsetX, offsetY);\r\n        ctxRef.current.stroke();\r\n    };\r\n\r\n    const stopDrawing = (e) => {\r\n        e.preventDefault();\r\n        ctxRef.current.closePath();\r\n        setIsDrawing(false);\r\n    };\r\n\r\n    const getPointerPosition = (e) => {\r\n        const canvas = canvasRef.current;\r\n        const rect = canvas.getBoundingClientRect(); \r\n\r\n        const scaleX = canvas.width / rect.width;   \r\n        const scaleY = canvas.height / rect.height;  \r\n\r\n        if (e.touches) {\r\n            const touch = e.touches[0];\r\n            return {\r\n                offsetX: (touch.clientX - rect.left) * scaleX,  \r\n                offsetY: (touch.clientY - rect.top) * scaleY  \r\n            };\r\n        } else {\r\n            return {\r\n                offsetX: (e.clientX - rect.left) * scaleX,\r\n                offsetY: (e.clientY - rect.top) * scaleY \r\n            };\r\n        }\r\n    };\r\n\r\n    const changeTool = (toolName) => {\r\n        setTool(toolName);\r\n        if (toolName === 'eraser') {\r\n            ctxRef.current.strokeStyle = 'black'; \r\n        } else {\r\n            ctxRef.current.strokeStyle = brushColor;\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (imageChosen) {\r\n            const preventScroll = (e) => e.preventDefault();\r\n            document.body.addEventListener('touchmove', preventScroll, { passive: false });\r\n            return () => {\r\n                document.body.removeEventListener('touchmove', preventScroll);\r\n            };\r\n        }\r\n    }, [imageChosen]);\r\n\r\n\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault();\r\n        \r\n        // add option available images\r\n        const formData = new FormData();\r\n        if (files.length > 0) {\r\n            files.forEach((file,index) => {\r\n                formData.append(`image${index}`,file);\r\n                formData.append(`option${index}`, aiOptions[index]);\r\n            });\r\n        }\r\n\r\n        //add text description\r\n        formData.append('text', text);\r\n\r\n        const canvas = canvasRef.current;\r\n        const canvasBlob = await new Promise((resolve, reject) => {   \r\n            canvas.toBlob((blob) => {\r\n                \r\n                if (blob) {\r\n                    resolve(blob);\r\n                } else {\r\n                    reject(new Error(\"Canvas toBlob failed\"));\r\n                }\r\n            }, 'image/png');\r\n        }).catch((error) => {\r\n            console.error(\"Failed to generate canvas blob:\", error);\r\n            return null; \r\n        });\r\n    \r\n        if (canvasBlob) {\r\n            formData.append('canvasImage', canvasBlob, 'canvasImage.png');\r\n        }\r\n        \r\n\r\n        try {\r\n            console.log(\"submitted!\");\r\n            const response = await fetch('http://localhost:5000/upload', {\r\n                method: 'POST',\r\n                body: formData,\r\n            });\r\n\r\n            if (response.ok) {\r\n                const result = await response.json();\r\n                console.log('AI generated image:', result);\r\n            } else {\r\n                console.error('Upload failed');\r\n            }\r\n            \r\n        } catch (error) {\r\n            console.error('Error:', error);\r\n        }\r\n        \r\n        \r\n    };\r\n\r\n  return (\r\n    <div style={{ backgroundImage:'url(\"../images/Sketch.png\")',backgroundColor: 'black', color: 'white', backgroundSize: 'cover',\r\n        backgroundPosition: 'center', minHeight: '100vh'}}>\r\n        <center>\r\n            {/* Here is the text upload */}\r\n            <form onSubmit={handleSubmit} style={{ width: '100%' }}>\r\n                    <div className=\"container\" style={{ margin: 'auto', fontFamily: 'Arial, sans-serif' }}>\r\n                        <h2>Want AI pictures? Upload your work here!</h2>\r\n                        <div className=\"avatar-upload\" style={{width:'100%'}}>\r\n                            <div className=\"avatar-preview\" style={{width:'100%',display:'flex',flexDirection:'row',gap:'10px'}}>\r\n                                {previews.length === 0 && (\r\n                                        <div\r\n                                            id=\"defaultPreview\"\r\n                                            style={{\r\n                                                width: '70%',\r\n                                                height: '33em',\r\n                                                justifyContent:'center',\r\n                                                alignItems:'center',\r\n                                                margin:'0% auto',\r\n                                                backgroundImage: 'url(/images/hum-2.jpg)',\r\n                                                backgroundSize: 'cover',\r\n                                                backgroundPosition: 'center',\r\n                                                border: '2px solid white',\r\n                                                borderRadius: '5px',\r\n                                                \r\n                                            }}\r\n                                        >\r\n                                        </div>\r\n                                    )}\r\n                                \r\n                                \r\n                                {previews.map((preview, index) => (\r\n                                    <div key={index} style={{ width:'100%',position: 'relative' }}>\r\n                                        <div\r\n                                            id=\"imagePreview\"\r\n                                            style={{\r\n                                                width: '100%',\r\n                                                height: '20em',\r\n                                                backgroundImage: `url(${preview})`,\r\n                                                backgroundSize: 'cover',\r\n                                                backgroundPosition: 'center',\r\n                                                border: '2px solid white',\r\n                                                borderRadius: '5px',\r\n                                            }}\r\n                                        >\r\n                                        </div>\r\n\r\n                                        {/* Selection Box for AI Options */}\r\n                                        <select\r\n                                            value={aiOptions[index]}\r\n                                            onChange={(e) => handleOptionChange(index, e.target.value)}\r\n                                            style={{ position: 'absolute', top: '10px', right: '10px', padding: '5px', borderRadius: '5px' }}\r\n                                        >\r\n                                            <option value= \"AI Options\">AI options</option>\r\n                                            <option value=\"Inpaint\">Inpaint</option>\r\n                                            <option value=\"Canny\">Canny</option>\r\n                                            <option value=\"Other\">Other</option>\r\n                                        </select>\r\n                                        <br></br>\r\n                                        <br></br>\r\n                                \r\n                                    </div>\r\n                                ))}\r\n                            </div>\r\n                            <br></br>\r\n                            <div className=\"avatar-edit\">\r\n                                <input\r\n                                    multiple\r\n                                    type=\"file\"\r\n                                    id=\"imageUpload\"\r\n                                    accept=\".png, .jpg, .jpeg\"\r\n                                    onChange={handleChange}\r\n                                    style={{ display: 'none' }}\r\n                                    \r\n                                />\r\n                                <label htmlFor=\"imageUpload\" style={{ cursor: 'pointer', padding: '10px', border: '1px solid #ccc', borderRadius: '5px' }}>\r\n                                    Browse\r\n                                </label>                   \r\n                            </div>\r\n                            <br></br>\r\n                            <br></br>\r\n                            <br />\r\n                            <br />\r\n\r\n                            <h1>Polish your work with inpainting, if you use this on ipad, two fingers double touch to move up/down the whole page</h1>\r\n                            <canvas\r\n                                ref={canvasRef}\r\n                                onMouseDown={startDrawing}\r\n                                onMouseUp={stopDrawing}\r\n                                onMouseMove={draw}\r\n                                onTouchMove={draw}\r\n                                onTouchEnd={stopDrawing}\r\n                                onTouchStart={startDrawing}\r\n                                width=\"800\"\r\n                                height=\"600\"\r\n                                style={{ backgroundColor:'white',display: 'start', width: '50em', height: '50em', border: '1px solid white', marginTop: '10px' }}\r\n                            />\r\n                            <br />\r\n                            <div>\r\n                                <button type=\"button\" onClick={() => changeTool('brush')} className=\"search-btn\" style={{ marginRight: '10px'}}>\r\n                                    <img src=\"../images/png-transparent-paintbrush-painting-black-brush-s-hand-monochrome-head.png\" className=\"painting-icon\"></img>\r\n                                </button>\r\n                                <button type=\"button\" onClick={() => changeTool('eraser')} className=\"search-btn\" style={{ marginRight: '10px' }}>\r\n                                    <img src=\"../images/be6c2fe2ca4a392ca28be1acc4f8ad44.jpg\" className=\"painting-icon\"></img>\r\n                                </button>\r\n                                <label>Brush Size:</label>\r\n                                <input\r\n                                    type=\"range\"\r\n                                    min=\"1\"\r\n                                    max=\"20\"\r\n                                    value={brushSize}\r\n                                    onChange={(e) => setBrushSize(e.target.value)}\r\n                                    style={{ marginLeft: '10px', marginRight:'10px'}}\r\n                                />\r\n\r\n                                <input\r\n                                    multiple\r\n                                    type=\"file\"\r\n                                    id=\"canvasUpload\"\r\n                                    accept=\".png, .jpg, .jpeg\"\r\n                                    onChange={handleCanvasChange}\r\n                                    style={{ display: 'none' }}\r\n                                    \r\n                                />\r\n                                <label htmlFor=\"canvasUpload\" style={{ cursor: 'pointer', padding: '10px', border: '1px solid #ccc', borderRadius: '5px' }}>\r\n                                    Choose an image\r\n                                </label>  \r\n                                \r\n                                \r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                <br></br>\r\n                <br></br>\r\n                <h2>Text To Image</h2>\r\n                <textarea class=\"form-control\" id=\"textAreaExample1\" rows=\"4\"  value={text} placeholder=\"Enter your description here...\" onChange={handleTextChange} style={{width:'65%'}}></textarea>\r\n                <br></br>\r\n                <br></br>\r\n                <input\r\n                    type=\"submit\"\r\n                    id=\"submit\"\r\n                    style={{display:'none'}}\r\n                    \r\n                />\r\n                <label htmlFor=\"submit\" style={{ cursor: 'pointer', padding: '10px', border: '1px solid #ccc', borderRadius: '5px' }}>\r\n                    Generate\r\n                </label> \r\n            </form>\r\n\r\n        </center>\r\n    </div>\r\n\r\n  );\r\n}","C:\\Users\\ryuto\\OneDrive\\Desktop\\2024_Sem2\\DECO3801\\DECO3801_The_R6\\frontend\\src\\pages\\Search.js",[],[],"C:\\Users\\ryuto\\OneDrive\\Desktop\\2024_Sem2\\DECO3801\\DECO3801_The_R6\\frontend\\src\\pages\\Privacy.js",[],[],"C:\\Users\\ryuto\\OneDrive\\Desktop\\2024_Sem2\\DECO3801\\DECO3801_The_R6\\frontend\\src\\pages\\About.js",[],[],"C:\\Users\\ryuto\\OneDrive\\Desktop\\2024_Sem2\\DECO3801\\DECO3801_The_R6\\frontend\\src\\pages\\Terms.js",[],[],"C:\\Users\\ryuto\\OneDrive\\Desktop\\2024_Sem2\\DECO3801\\DECO3801_The_R6\\frontend\\src\\components\\Header.js",[],[],"C:\\Users\\ryuto\\OneDrive\\Desktop\\2024_Sem2\\DECO3801\\DECO3801_The_R6\\frontend\\src\\components\\Footer.js",[],[],{"ruleId":"94","severity":1,"message":"95","line":1,"column":16,"nodeType":"96","messageId":"97","endLine":1,"endColumn":24},{"ruleId":"94","severity":1,"message":"98","line":1,"column":26,"nodeType":"96","messageId":"97","endLine":1,"endColumn":35},{"ruleId":"94","severity":1,"message":"99","line":12,"column":12,"nodeType":"96","messageId":"97","endLine":12,"endColumn":16},{"ruleId":"94","severity":1,"message":"100","line":14,"column":24,"nodeType":"96","messageId":"97","endLine":14,"endColumn":37},{"ruleId":"101","severity":1,"message":"102","line":307,"column":37,"nodeType":"103","endLine":307,"endColumn":159},{"ruleId":"101","severity":1,"message":"102","line":310,"column":37,"nodeType":"103","endLine":310,"endColumn":121},"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'tool' is assigned a value but never used.","'setBrushColor' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement"]